noch, do not forget to run ffmpeg to capture the screen.

ffmpeg -y -f x11grab -draw_mouse 1 -framerate 5 -video_size 1024x768 -i :0.0 srceencast.mp4

make
https://en.wikipedia.org/wiki/Makefile
https://en.wikipedia.org/wiki/Make_(software)
https://www.codeproject.com/Articles/31488/Makefiles-in-Linux-An-Overview
makefiles:
http://www.sis.pitt.edu/mbsclass/tutorial/advanced/makefile/whatis.htm

rob pike's notes on programming in c
http://doc.cat-v.org/bell_labs/pikestyle

i/o in c
http://users.cs.cf.ac.uk/Dave.Marshall/C/node18.html
reading from stdin:

read(), gets()

https://stackoverflow.com/questions/15883568/reading-from-stdin
https://stackoverflow.com/questions/8975521/read-from-stdin


hello world examples
https://helloworldcollection.github.io



puts()
gets() <-- ACHTUNG, NEVER USE THIS FUNCTION!!!
http://www.thegeekstuff.com/2013/06/buffer-overflow

```
     The libc is certainly not a good guide:

    * Buffer overruns are not ruled out by design: gets, sscanf etc.
    * Interface inconsistencies: gets vs fgets, fgets vs fscanf (note
    the position of the file stream parameter)
    * Bad interfaces like that of getchar() whose return code
    can be a character or an error code
    * Particularly bad buffering system which
    – ignores the block structure of underlying file systems, and
    – does not support bidirectional buffering
    * No provisions exist such that independent libraries can cooperate
    with each other in
    – signal handling,
    – setting up alarms, and
    – tracking childs.

    (Please note that I do not want to bash Ritchie, Kernighan etc. The
    libc is history and should be taken as such… It is time to abandon
    C and the libc and it does not help to place other systems on top of this historic relic.)
```

http://groups.google.am/group/comp.lang.oberon/browse_thread/thread/ffe11b45037375e0/e8b65d37114d4931?hl=hy&ie=UTF-8&oe=utf-8&q=andreas+borchert+c+interfaces#e8b65d37114d4931

```
Consider C's hello.c, usually given as:

        #include <stdio.h>
        main() {
                printf("Hello, world\n");
        }

Very simple and clean, but why use printf if you aren't doing any % formats?

        #include <stdio.h>
        main() {
                fputs("Hello, world\n", stdout);
        }

But, wait, since we want the \n anyway, why use fputs?

        #include <stdio.h>
        main() {
                puts("Hello, world.");
        }

But, wait, why drag in stdio and make our binary bigger?

        #define greeting "Hello, world.\n"
        main() {
                write(1, greeting, (sizeof greeting));
        }

But, wait, what about 16-bit chars?

        #define greeting "Hello, world.\n"
        main() {
                write(1, greeting, sizeof(char)*(sizeof greeting));
        }

But, wait, what about setlocale()?

But, wait, why are we arguing about there being a best way to do a thing,
or whether there has ever been a language whose libraries were so well-
considered in the early days that noone ever thought they were ugly later?
```

https://groups.google.com/d/msg/comp.lang.oberon/8Bmb20Ds8Cg/DO2QwMmGuAQJ


